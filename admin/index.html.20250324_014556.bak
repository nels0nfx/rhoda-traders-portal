<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Rhoda Traders</title>
    <!-- Favicon -->
    <link rel="icon" href="../../images/favicon.ico" type="image/x-icon">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="../css/styles.css">
</head>
<body>
    <div class="dashboard">
        <!-- Dashboard Sidebar -->
        <div class="dashboard-sidebar">
            <div class="dashboard-logo">
                <a href="../index.html">
                    <img src="../images/logo.jpeg" alt="Rhoda Traders Logo" class="logo">
                </a>
            </div>
            
            <ul class="dashboard-nav">
                <li><a href="index.html" class="active"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="applications.html"><i class="fas fa-user-plus"></i> Applications</a></li>
                <li><a href="workers.html"><i class="fas fa-users"></i> Workers</a></li>
                <li><a href="shipments.html"><i class="fas fa-box"></i> Shipments</a></li>
                <li><a href="reports.html"><i class="fas fa-file-alt"></i> Reports</a></li>
                <li><a href="payments.html"><i class="fas fa-money-bill-wave"></i> Payments</a></li>
                <li><a href="messages.html"><i class="fas fa-envelope"></i> Messages</a></li>
                <li><a href="settings.html"><i class="fas fa-cog"></i> Settings</a></li>
                <li><a href="../../index.html"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </div>
        
        <!-- Dashboard Main Content -->
        <div class="dashboard-main">
            <div class="dashboard-header">
                <h1 class="dashboard-title">Admin Dashboard</h1>
                <div class="user-info">
                    <span class="user-greeting">Welcome, <strong>Admin</strong></span>
                    <div class="user-avatar">
                        <img src="../images/admin-avatar.jpg" alt="Admin Avatar">
                    </div>
                </div>
            </div>
            
            <!-- Overview Cards -->
            <div class="dashboard-cards">
                <div class="dashboard-card">
                    <div class="dashboard-card-header">
                        <h3 class="dashboard-card-title">New Applications</h3>
                        <div class="dashboard-card-icon">
                            <i class="fas fa-user-plus"></i>
                        </div>
                    </div>
                    <div class="dashboard-card-value">15</div>
                    <div class="dashboard-card-label">
                        <a href="applications.html">View Applications</a>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="dashboard-card-header">
                        <h3 class="dashboard-card-title">Active Workers</h3>
                        <div class="dashboard-card-icon">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                    <div class="dashboard-card-value">42</div>
                    <div class="dashboard-card-label">
                        <a href="workers.html">Manage Workers</a>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="dashboard-card-header">
                        <h3 class="dashboard-card-title">Pending Reports</h3>
                        <div class="dashboard-card-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                    </div>
                    <div class="dashboard-card-value">8</div>
                    <div class="dashboard-card-label">
                        <a href="reports.html">Review Reports</a>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="dashboard-card-header">
                        <h3 class="dashboard-card-title">Pending Shipments</h3>
                        <div class="dashboard-card-icon">
                            <i class="fas fa-shipping-fast"></i>
                        </div>
                    </div>
                    <div class="dashboard-card-value">12</div>
                    <div class="dashboard-card-label">
                        <a href="shipments.html">Manage Shipments</a>
                    </div>
                </div>
            </div>
            
            <!-- Recent Applications -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Recent Applications</h2>
                    <a href="applications.html" class="btn btn-sm">View All</a>
                </div>
                
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Location</th>
                                <th>Date Applied</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>A-1024</td>
                                <td>Sarah Johnson</td>
                                <td>New York, USA</td>
                                <td>March 22, 2025</td>
                                <td><span class="status-badge status-pending">Pending</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="Review">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" data-tooltip="Reject">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>A-1023</td>
                                <td>Michael Davis</td>
                                <td>Chicago, USA</td>
                                <td>March 21, 2025</td>
                                <td><span class="status-badge status-pending">Pending</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="Review">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" data-tooltip="Reject">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>A-1022</td>
                                <td>Jennifer Smith</td>
                                <td>Los Angeles, USA</td>
                                <td>March 20, 2025</td>
                                <td><span class="status-badge status-pending">Pending</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="Review">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" data-tooltip="Reject">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Worker Activity -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Worker Activity</h2>
                    <a href="workers.html" class="btn btn-sm">View All Workers</a>
                </div>
                
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Worker ID</th>
                                <th>Name</th>
                                <th>Location</th>
                                <th>Last Report</th>
                                <th>Performance</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>W-1001</td>
                                <td>John Doe</td>
                                <td>Miami, USA</td>
                                <td>Today, 11:45 AM</td>
                                <td>
                                    <div class="performance-bar">
                                        <div class="performance-fill" style="width: 95%"></div>
                                    </div>
                                    <span class="performance-text">Excellent</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Profile">
                                        <i class="fas fa-user"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline" data-tooltip="Send Message">
                                        <i class="fas fa-envelope"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>W-1002</td>
                                <td>Jane Smith</td>
                                <td>Dallas, USA</td>
                                <td>Yesterday, 3:20 PM</td>
                                <td>
                                    <div class="performance-bar">
                                        <div class="performance-fill" style="width: 88%"></div>
                                    </div>
                                    <span class="performance-text">Good</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Profile">
                                        <i class="fas fa-user"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline" data-tooltip="Send Message">
                                        <i class="fas fa-envelope"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>W-1003</td>
                                <td>Robert Johnson</td>
                                <td>Atlanta, USA</td>
                                <td>March 21, 2025</td>
                                <td>
                                    <div class="performance-bar">
                                        <div class="performance-fill" style="width: 75%"></div>
                                    </div>
                                    <span class="performance-text">Average</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Profile">
                                        <i class="fas fa-user"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline" data-tooltip="Send Message">
                                        <i class="fas fa-envelope"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Recent Reports -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Recent Reports</h2>
                    <a href="reports.html" class="btn btn-sm">View All Reports</a>
                </div>
                
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Report ID</th>
                                <th>Worker</th>
                                <th>Tracking #</th>
                                <th>Submission Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>R-23457</td>
                                <td>John Doe</td>
                                <td>RT78945612</td>
                                <td>Today, 11:45 AM</td>
                                <td><span class="status-badge status-pending">Pending Review</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Report">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>R-23456</td>
                                <td>Jane Smith</td>
                                <td>RT65432198</td>
                                <td>Yesterday, 3:20 PM</td>
                                <td><span class="status-badge status-pending">Pending Review</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Report">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td>R-23455</td>
                                <td>Robert Johnson</td>
                                <td>RT12345678</td>
                                <td>March 21, 2025</td>
                                <td><span class="status-badge status-pending">Pending Review</span></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" data-tooltip="View Report">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-success" data-tooltip="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Quick Actions</h2>
                </div>
                
                <div class="quick-actions">
                    <a href="applications.html" class="quick-action-card">
                        <div class="quick-action-icon">
                            <i class="fas fa-user-plus"></i>
                        </div>
                        <div class="quick-action-title">Review Applications</div>
                    </a>
                    
                    <a href="shipments.html" class="quick-action-card">
                        <div class="quick-action-icon">
                            <i class="fas fa-box"></i>
                        </div>
                        <div class="quick-action-title">Manage Shipments</div>
                    </a>
                    
                    <a href="reports.html" class="quick-action-card">
                        <div class="quick-action-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="quick-action-title">Review Reports</div>
                    </a>
                    
                    <a href="messages.html" class="quick-action-card">
                        <div class="quick-action-icon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <div class="quick-action-title">Send Messages</div>
                    </a>
                </div>
            </div>
            
            <!-- System Stats -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>System Statistics</h2>
                </div>
                
                <div class="stats-grid">
                    <div class="stats-card">
                        <div class="stats-header">
                            <h3>Applications</h3>
                        </div>
                        <div class="stats-chart">
                            <!-- Chart would be rendered here using a chart library -->
                            <div class="placeholder-chart">
                                <div class="chart-bar" style="height: 30%;"></div>
                                <div class="chart-bar" style="height: 45%;"></div>
                                <div class="chart-bar" style="height: 60%;"></div>
                                <div class="chart-bar" style="height: 75%;"></div>
                                <div class="chart-bar" style="height: 50%;"></div>
                                <div class="chart-bar" style="height: 65%;"></div>
                                <div class="chart-bar" style="height: 80%;"></div>
                            </div>
                        </div>
                        <div class="stats-info">
                            <div class="stats-item">
                                <span class="stats-label">Total</span>
                                <span class="stats-value">156</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Approved</span>
                                <span class="stats-value">42</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Rejected</span>
                                <span class="stats-value">99</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Pending</span>
                                <span class="stats-value">15</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="stats-card">
                        <div class="stats-header">
                            <h3>Worker Distribution</h3>
                        </div>
                        <div class="stats-chart">
                            <!-- Pie chart would be rendered here -->
                            <div class="placeholder-pie-chart">
                                <div class="pie-segment segment-1"></div>
                                <div class="pie-segment segment-2"></div>
                                <div class="pie-segment segment-3"></div>
                            </div>
                        </div>
                        <div class="stats-info">
                            <div class="stats-item">
                                <span class="stats-label">USA</span>
                                <span class="stats-value">28</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Canada</span>
                                <span class="stats-value">8</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">UK</span>
                                <span class="stats-value">6</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="stats-card">
                        <div class="stats-header">
                            <h3>Monthly Reports</h3>
                        </div>
                        <div class="stats-chart">
                            <!-- Line chart would be rendered here -->
                            <div class="placeholder-line-chart">
                                <svg viewBox="0 0 100 50">
                                    <polyline points="0,40 15,35 30,25 45,30 60,20 75,15 90,10 100,5" />
                                </svg>
                            </div>
                        </div>
                        <div class="stats-info">
                            <div class="stats-item">
                                <span class="stats-label">Total</span>
                                <span class="stats-value">245</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">This Month</span>
                                <span class="stats-value">87</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Growth</span>
                                <span class="stats-value">+12%</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase JavaScript Files -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-analytics.js";
        import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-auth.js";
        import { getFirestore, collection, query, where, getDocs, updateDoc, doc, orderBy, limit } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBCF-MkWe8JhkXKNoKLqzWAZxZVHMukO-c",
            authDomain: "rhoda-traders.firebaseapp.com",
            projectId: "rhoda-traders",
            storageBucket: "rhoda-traders.firebasestorage.app",
            messagingSenderId: "88738705806",
            appId: "1:88738705806:web:0cbbb1be4ce51daa7334df",
            measurementId: "G-44T210GQ6S"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        const auth = getAuth();
        const db = getFirestore();

        // Check if user is logged in and is an admin
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                // User is signed in
                try {
                    // Get user data from Firestore
                    const q = query(collection(db, 'users'), where('uid', '==', user.uid));
                    const querySnapshot = await getDocs(q);
                    
                    if (!querySnapshot.empty) {
                        const userData = querySnapshot.docs[0].data();
                        
                        // Check if user is an admin
                        if (userData.role === 'admin') {
                            // Update UI with admin data
                            updateAdminInfo(userData);
                            
                            // Load dashboard data
                            loadDashboardData();
                        } else {
                            // Not an admin, redirect to user dashboard
                            window.location.href = '../dashboard/index.html';
                        }
                    } else {
                        // User not found in Firestore
                        window.location.href = '../login.html';
                    }
                } catch (error) {
                    console.error('Error getting user data:', error);
                    window.location.href = '../login.html';
                }
            } else {
                // User is signed out, redirect to login page
                window.location.href = '../login.html';
            }
        });

        // Update admin info in the UI
        function updateAdminInfo(userData) {
            const userGreeting = document.querySelector('.user-greeting strong');
            if (userGreeting) {
                userGreeting.textContent = userData.firstName ? `${userData.firstName} ${userData.lastName}` : 'Admin';
            }
        }

        // Load dashboard data
        async function loadDashboardData() {
            try {
                // Load applications count
                const applicationsCount = await getApplicationsCount();
                updateDashboardCard(0, applicationsCount.pending);
                
                // Load workers count
                const workersCount = await getWorkersCount();
                updateDashboardCard(1, workersCount.active);
                
                // Load pending reports count
                const reportsCount = await getReportsCount();
                updateDashboardCard(2, reportsCount.pending);
                
                // Load pending shipments count
                const shipmentsCount = await getShipmentsCount();
                updateDashboardCard(3, shipmentsCount.pending);
                
                // Load recent applications
                const recentApplications = await getRecentApplications();
                updateRecentApplicationsTable(recentApplications);
                
                // Load worker activity
                const workerActivity = await getWorkerActivity();
                updateWorkerActivityTable(workerActivity);
                
                // Load recent reports
                const recentReports = await getRecentReports();
                updateRecentReportsTable(recentReports);
                
                // Update system stats
                updateSystemStats({
                    applications: {
                        total: applicationsCount.total,
                        approved: applicationsCount.approved,
                        rejected: applicationsCount.rejected,
                        pending: applicationsCount.pending
                    },
                    workers: workersCount,
                    reports: reportsCount
                });
            } catch (error) {
                console.error('Error loading dashboard data:', error);
            }
        }

        // Get applications count
        async function getApplicationsCount() {
            try {
                const pendingQuery = query(collection(db, 'users'), where('status', '==', 'pending'));
                const approvedQuery = query(collection(db, 'users'), where('status', '==', 'approved'));
                const rejectedQuery = query(collection(db, 'users'), where('status', '==', 'rejected'));
                
                const [pendingSnapshot, approvedSnapshot, rejectedSnapshot] = await Promise.all([
                    getDocs(pendingQuery),
                    getDocs(approvedQuery),
                    getDocs(rejectedQuery)
                ]);
                
                return {
                    pending: pendingSnapshot.size,
                    approved: approvedSnapshot.size,
                    rejected: rejectedSnapshot.size,
                    total: pendingSnapshot.size + approvedSnapshot.size + rejectedSnapshot.size
                };
            } catch (error) {
                console.error('Error getting applications count:', error);
                return { pending: 0, approved: 0, rejected: 0, total: 0 };
            }
        }

        // Get workers count
        async function getWorkersCount() {
            try {
                const activeQuery = query(
                    collection(db, 'users'), 
                    where('status', '==', 'approved'),
                    where('role', '==', 'user')
                );
                
                const activeSnapshot = await getDocs(activeQuery);
                
                // Count workers by country
                const countryDistribution = {};
                activeSnapshot.forEach(doc => {
                    const userData = doc.data();
                    const country = userData.country || 'Unknown';
                    countryDistribution[country] = (countryDistribution[country] || 0) + 1;
                });
                
                return {
                    active: activeSnapshot.size,
                    countryDistribution: countryDistribution
                };
            } catch (error) {
                console.error('Error getting workers count:', error);
                return { active: 0, countryDistribution: {} };
            }
        }

        // Get reports count
        async function getReportsCount() {
            try {
                const pendingQuery = query(collection(db, 'reports'), where('status', '==', 'pending'));
                const approvedQuery = query(collection(db, 'reports'), where('status', '==', 'approved'));
                
                const [pendingSnapshot, approvedSnapshot] = await Promise.all([
                    getDocs(pendingQuery),
                    getDocs(approvedQuery)
                ]);
                
                // Get monthly reports count
                const today = new Date();
                const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                const monthlyQuery = query(
                    collection(db, 'reports'),
                    where('createdAt', '>=', firstDayOfMonth)
                );
                
                const monthlySnapshot = await getDocs(monthlyQuery);
                
                return {
                    pending: pendingSnapshot.size,
                    approved: approvedSnapshot.size,
                    total: pendingSnapshot.size + approvedSnapshot.size,
                    monthly: monthlySnapshot.size
                };
            } catch (error) {
                console.error('Error getting reports count:', error);
                return { pending: 0, approved: 0, total: 0, monthly: 0 };
            }
        }

        // Get shipments count
        async function getShipmentsCount() {
            try {
                const pendingQuery = query(
                    collection(db, 'shipments'),
                    where('status', 'in', ['processing', 'in_transit'])
                );
                
                const pendingSnapshot = await getDocs(pendingQuery);
                
                return {
                    pending: pendingSnapshot.size
                };
            } catch (error) {
                console.error('Error getting shipments count:', error);
                return { pending: 0 };
            }
        }

        // Get recent applications
        async function getRecentApplications() {
            try {
                const q = query(
                    collection(db, 'users'),
                    where('status', '==', 'pending'),
                    where('role', '==', 'user'),
                    orderBy('createdAt', 'desc'),
                    limit(3)
                );
                
                const querySnapshot = await getDocs(q);
                const applications = [];
                
                querySnapshot.forEach(doc => {
                    applications.push({
                        id: doc.id,
                        ...doc.data()
                    });
                });
                
                return applications;
            } catch (error) {
                console.error('Error getting recent applications:', error);
                return [];
            }
        }

        // Get worker activity
        async function getWorkerActivity() {
            try {
                const q = query(
                    collection(db, 'users'),
                    where('status', '==', 'approved'),
                    where('role', '==', 'user'),
                    orderBy('createdAt', 'desc'),
                    limit(3)
                );
                
                const querySnapshot = await getDocs(q);
                const workers = [];
                
                // Get the latest report for each worker
                for (const doc of querySnapshot.docs) {
                    const worker = {
                        id: doc.id,
                        ...doc.data()
                    };
                    
                    // Get latest report
                    const reportQuery = query(
                        collection(db, 'reports'),
                        where('userId', '==', worker.uid),
                        orderBy('createdAt', 'desc'),
                        limit(1)
                    );
                    
                    const reportSnapshot = await getDocs(reportQuery);
                    
                    if (!reportSnapshot.empty) {
                        worker.lastReport = reportSnapshot.docs[0].data();
                    }
                    
                    // Calculate performance score (simplified)
                    worker.performance = Math.floor(Math.random() * 30) + 70; // 70-100 range for demo
                    
                    workers.push(worker);
                }
                
                return workers;
            } catch (error) {
                console.error('Error getting worker activity:', error);
                return [];
            }
        }

        // Get recent reports
        async function getRecentReports() {
            try {
                const q = query(
                    collection(db, 'reports'),
                    where('status', '==', 'pending'),
                    orderBy('createdAt', 'desc'),
                    limit(3)
                );
                
                const querySnapshot = await getDocs(q);
                const reports = [];
                
                // Get user data for each report
                for (const doc of querySnapshot.docs) {
                    const report = {
                        id: doc.id,
                        ...doc.data()
                    };
                    
                    // Get user data
                    const userQuery = query(
                        collection(db, 'users'),
                        where('uid', '==', report.userId)
                    );
                    
                    const userSnapshot = await getDocs(userQuery);
                    
                    if (!userSnapshot.empty) {
                        report.user = userSnapshot.docs[0].data();
                    }
                    
                    reports.push(report);
                }
                
                return reports;
            } catch (error) {
                console.error('Error getting recent reports:', error);
                return [];
            }
        }

        // Update dashboard card
        function updateDashboardCard(index, value) {
            const cardValue = document.querySelectorAll('.dashboard-card-value')[index];
            if (cardValue) {
                cardValue.textContent = value;
            }
        }

        // Update recent applications table
        function updateRecentApplicationsTable(applications) {
            const tableBody = document.querySelector('.dashboard-section:nth-of-type(1) tbody');
            if (!tableBody) return;
            
            // Clear existing rows
            tableBody.innerHTML = '';
            
            // Add application rows
            if (applications.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="6" class="text-center">No pending applications.</td>`;
                tableBody.appendChild(emptyRow);
                return;
            }
            
            applications.forEach(application => {
                const applicationDate = application.createdAt?.toDate ? 
                    application.createdAt.toDate() : 
                    new Date(application.createdAt);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>A-${application.id.substring(0, 4)}</td>
                    <td>${application.firstName} ${application.lastName}</td>
                    <td>${application.city}, ${application.country}</td>
                    <td>${formatDate(applicationDate)}</td>
                    <td><span class="status-badge status-pending">Pending</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary review-application" data-id="${application.id}" data-tooltip="Review">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-success approve-application" data-id="${application.id}" data-tooltip="Approve">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="btn btn-sm btn-danger reject-application" data-id="${application.id}" data-tooltip="Reject">
                            <i class="fas fa-times"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Add event listeners to buttons
            document.querySelectorAll('.review-application').forEach(button => {
                button.addEventListener('click', function() {
                    const applicationId = this.dataset.id;
                    // Here you would show a modal with application details
                    window.location.href = `applications.html?id=${applicationId}`;
                });
            });
            
            document.querySelectorAll('.approve-application').forEach(button => {
                button.addEventListener('click', async function() {
                    const applicationId = this.dataset.id;
                    if (confirm('Are you sure you want to approve this application?')) {
                        try {
                            await updateDoc(doc(db, 'users', applicationId), {
                                status: 'approved'
                            });
                            
                            alert('Application approved successfully!');
                            loadDashboardData(); // Reload dashboard data
                        } catch (error) {
                            console.error('Error approving application:', error);
                            alert('Failed to approve application. Please try again.');
                        }
                    }
                });
            });
            
            document.querySelectorAll('.reject-application').forEach(button => {
                button.addEventListener('click', async function() {
                    const applicationId = this.dataset.id;
                    if (confirm('Are you sure you want to reject this application?')) {
                        try {
                            await updateDoc(doc(db, 'users', applicationId), {
                                status: 'rejected'
                            });
                            
                            alert('Application rejected successfully!');
                            loadDashboardData(); // Reload dashboard data
                        } catch (error) {
                            console.error('Error rejecting application:', error);
                            alert('Failed to reject application. Please try again.');
                        }
                    }
                });
            });
        }

        // Update worker activity table
        function updateWorkerActivityTable(workers) {
            const tableBody = document.querySelector('.dashboard-section:nth-of-type(2) tbody');
            if (!tableBody) return;
            
            // Clear existing rows
            tableBody.innerHTML = '';
            
            // Add worker rows
            if (workers.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="6" class="text-center">No active workers.</td>`;
                tableBody.appendChild(emptyRow);
                return;
            }
            
            workers.forEach(worker => {
                let lastReportText = 'No reports yet';
                if (worker.lastReport && worker.lastReport.createdAt) {
                    const reportDate = worker.lastReport.createdAt.toDate ? 
                        worker.lastReport.createdAt.toDate() : 
                        new Date(worker.lastReport.createdAt);
                    
                    lastReportText = formatDateTime(reportDate);
                }
                
                // Determine performance text
                let performanceText = 'Average';
                if (worker.performance >= 90) {
                    performanceText = 'Excellent';
                } else if (worker.performance >= 80) {
                    performanceText = 'Good';
                } else if (worker.performance < 70) {
                    performanceText = 'Poor';
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>W-${worker.id.substring(0, 4)}</td>
                    <td>${worker.firstName} ${worker.lastName}</td>
                    <td>${worker.city}, ${worker.country}</td>
                    <td>${lastReportText}</td>
                    <td>
                        <div class="performance-bar">
                            <div class="performance-fill" style="width: ${worker.performance}%"></div>
                        </div>
                        <span class="performance-text">${performanceText}</span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary view-worker" data-id="${worker.id}" data-tooltip="View Profile">
                            <i class="fas fa-user"></i>
                        </button>
                        <button class="btn btn-sm btn-outline message-worker" data-id="${worker.id}" data-tooltip="Send Message">
                            <i class="fas fa-envelope"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Add event listeners to buttons
            document.querySelectorAll('.view-worker').forEach(button => {
                button.addEventListener('click', function() {
                    const workerId = this.dataset.id;
                    window.location.href = `workers.html?id=${workerId}`;
                });
            });
            
            document.querySelectorAll('.message-worker').forEach(button => {
                button.addEventListener('click', function() {
                    const workerId = this.dataset.id;
                    window.location.href = `messages.html?id=${workerId}`;
                });
            });
        }

        // Update recent reports table
        function updateRecentReportsTable(reports) {
            const tableBody = document.querySelector('.dashboard-section:nth-of-type(3) tbody');
            if (!tableBody) return;
            
            // Clear existing rows
            tableBody.innerHTML = '';
            
            // Add report rows
            if (reports.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="6" class="text-center">No pending reports.</td>`;
                tableBody.appendChild(emptyRow);
                return;
            }
            
            reports.forEach(report => {
                const reportDate = report.createdAt?.toDate ? 
                    report.createdAt.toDate() : 
                    new Date(report.createdAt);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>R-${report.id.substring(0, 5)}</td>
                    <td>${report.user ? `${report.user.firstName} ${report.user.lastName}` : 'Unknown User'}</td>
                    <td>${report.trackingNumber}</td>
                    <td>${formatDateTime(reportDate)}</td>
                    <td><span class="status-badge status-pending">Pending Review</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary view-report" data-id="${report.id}" data-tooltip="View Report">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-success approve-report" data-id="${report.id}" data-tooltip="Approve">
                            <i class="fas fa-check"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Add event listeners to buttons
            document.querySelectorAll('.view-report').forEach(button => {
                button.addEventListener('click', function() {
                    const reportId = this.dataset.id;
                    window.location.href = `reports.html?id=${reportId}`;
                });
            });
            
            document.querySelectorAll('.approve-report').forEach(button => {
                button.addEventListener('click', async function() {
                    const reportId = this.dataset.id;
                    if (confirm('Are you sure you want to approve this report?')) {
                        try {
                            await updateDoc(doc(db, 'reports', reportId), {
                                status: 'approved'
                            });
                            
                            alert('Report approved successfully!');
                            loadDashboardData(); // Reload dashboard data
                        } catch (error) {
                            console.error('Error approving report:', error);
                            alert('Failed to approve report. Please try again.');
                        }
                    }
                });
            });
        }

        // Update system stats
        function updateSystemStats(stats) {
            // Update applications stats
            const appStatsValues = document.querySelectorAll('.stats-card:nth-of-type(1) .stats-value');
            if (appStatsValues.length >= 4) {
                appStatsValues[0].textContent = stats.applications.total;
                appStatsValues[1].textContent = stats.applications.approved;
                appStatsValues[2].textContent = stats.applications.rejected;
                appStatsValues[3].textContent = stats.applications.pending;
            }
            
            // Update worker distribution stats
            const workerStatsValues = document.querySelectorAll('.stats-card:nth-of-type(2) .stats-value');
            const countries = Object.keys(stats.workers.countryDistribution).slice(0, 3);
            
            if (workerStatsValues.length >= countries.length) {
                const workerStatsLabels = document.querySelectorAll('.stats-card:nth-of-type(2) .stats-label');
                
                countries.forEach((country, index) => {
                    if (workerStatsLabels[index] && workerStatsValues[index]) {
                        workerStatsLabels[index].textContent = country;
                        workerStatsValues[index].textContent = stats.workers.countryDistribution[country];
                    }
                });
            }
            
            // Update reports stats
            const reportStatsValues = document.querySelectorAll('.stats-card:nth-of-type(3) .stats-value');
            if (reportStatsValues.length >= 3) {
                reportStatsValues[0].textContent = stats.reports.total;
                reportStatsValues[1].textContent = stats.reports.monthly;
                
                // Calculate growth (simplified)
                const growth = stats.reports.total > 0 ? 
                    Math.floor((stats.reports.monthly / stats.reports.total) * 100) : 0;
                reportStatsValues[2].textContent = `+${growth}%`;
            }
        }

        // Handle logout
        document.querySelector('a[href="../../index.html"]').addEventListener('click', async function(event) {
            event.preventDefault();
            try {
                await signOut(auth);
                window.location.href = '../../index.html';
            } catch (error) {
                console.error('Error signing out:', error);
            }
        });

        // Helper function to format date
        function formatDate(date) {
            return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Helper function to format date and time
        function formatDateTime(date) {
            const now = new Date();
            const dateObj = new Date(date);
            
            // If today, show time
            if (dateObj.toDateString() === now.toDateString()) {
                return `Today, ${dateObj.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`;
            }
            
            // If yesterday, show "Yesterday"
            const yesterday = new Date(now);
            yesterday.setDate(now.getDate() - 1);
            if (dateObj.toDateString() === yesterday.toDateString()) {
                return `Yesterday, ${dateObj.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`;
            }
            
            // Otherwise show date
            return formatDate(dateObj);
        }
    </script>

    <!-- Main JavaScript -->
    <script src="../../js/main.js"></script>
    
    <!-- Tawk.to Live Chat Integration -->
    <script type="text/javascript">
        // This would be replaced with your actual Tawk.to script
        // Example:
        /*
        var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
        (function(){
            var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
            s1.async=true;
            s1.src='https://embed.tawk.to/YOUR_TAWK_ID/default';
            s1.charset='UTF-8';
            s1.setAttribute('crossorigin','*');
            s0.parentNode.insertBefore(s1,s0);
        })();
        */
        console.log('Tawk.to chat would be initialized here');
    </script>
</body>
</html>